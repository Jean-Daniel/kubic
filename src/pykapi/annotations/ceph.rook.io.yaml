module: rook.io

patches:
  CephClusterSpec:
    resources: { type: object, additionalProperties: { $ref: "io.k8s.api.core.v1.ResourceRequirements" } }
  CephClusterSpecMON:
    volumeClaimTemplate: "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
  CephClusterSpecHealthCheck:
    livenessProbe: { type: object, additionalProperties: { $ref: "io.k8s.api.core.v1.Probe" } }
  CephObjectStoreSpecHealthCheck:
    livenessProbe: "io.k8s.api.core.v1.Probe"
  CephFilesystemMirrorSpec:
    resources: "io.k8s.api.core.v1.ResourceRequirements"
  CephFilesystemSpec:
    dataPools: CephBlockPoolSpec
    metadataPool: CephBlockPoolSpec
  CephObjectStoreSpec:
    dataPool: CephBlockPoolSpec
    metadataPool: CephBlockPoolSpec
  CephObjectZoneSpec:
    dataPool: CephBlockPoolSpec
    metadataPool: CephBlockPoolSpec
  CephRBDMirrorSpec:
    resources: "io.k8s.api.core.v1.ResourceRequirements"
  StretchClusterZone:
    volumeClaimTemplate: "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
  Gateway:
    resources: "io.k8s.api.core.v1.ResourceRequirements"
  MetadataServer:
    resources: "io.k8s.api.core.v1.ResourceRequirements"
  Node:
    volumeClaimTemplates: "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
    resources: "io.k8s.api.core.v1.ResourceRequirements"
  Placement:
    nodeAffinity: "io.k8s.api.core.v1.NodeAffinity"
    podAffinity: "io.k8s.api.core.v1.PodAffinity"
    podAntiAffinity: "io.k8s.api.core.v1.PodAntiAffinity"
    tolerations: "io.k8s.api.core.v1.Toleration"
    topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
  Server:
    resources: "io.k8s.api.core.v1.ResourceRequirements"
  StorageClassDeviceSet:
    volumeClaimTemplates: "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
    resources: "io.k8s.api.core.v1.ResourceRequirements"
    preparePlacement: "Placement"
  Storage:
    volumeClaimTemplates: "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
