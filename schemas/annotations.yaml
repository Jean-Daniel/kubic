"meta.v1.ObjectMeta":
  managedFields:

"apiextensions.k8s.io.v1.CustomResourceValidation":
  openAPIV3Schema: { snake_name: "openapi_v3_schema" }

crds:
  # Map CRD group name
  groups:
    # cert manager
    "acme.cert-manager.io": "cert-manager.io"
    # rook
    "ceph.rook.io": "rook.io"
    "objectbucket.io": "rook.io"
    "replication.storage.openshift.io": "rook.io"

  "cilium.io":
    Egress:
      toCIDRSet: "io.k8s.api.networking.v1.IPBlock"
    EgressDeny:
      toCIDRSet: "io.k8s.api.networking.v1.IPBlock"
    Ingress:
      fromCIDRSet: "io.k8s.api.networking.v1.IPBlock"
    IngressDeny:
      fromCIDRSet: "io.k8s.api.networking.v1.IPBlock"

    CiliumNodeStatus:
      eni:
        type_name: ENIStatus

  "autoscaling.k8s.io":
    VerticalPodAutoscalerSpec:
      targetRef: "io.k8s.api.autoscaling.v1.CrossVersionObjectReference"

  "cert-manager.io":
    Preference:
      matchExpressions: "io.k8s.api.core.v1.NodeSelectorRequirement"
    NodeSelectorTerm:
      matchExpressions: "io.k8s.api.core.v1.NodeSelectorRequirement"
    LabelSelector:
      matchExpressions: "io.k8s.api.core.v1.NodeSelectorRequirement"
    PodTemplateSpec:
      affinity: "io.k8s.api.core.v1.Affinity"
      tolerations: "io.k8s.api.core.v1.Toleration"
    IssuerSpecAcme:
      privateKeySecretRef: SecretRef
    ClusterIssuerSpecAcme:
      privateKeySecretRef: SecretRef
    ExternalAccountBinding:
      keySecretRef: SecretRef
    Cloud:
      apiTokenSecretRef: SecretRef
    Route53:
      secretAccessKeySecretRef: SecretRef
    CertificateRequest:
      status: { type_name: CertificateRequestStatus }
    CertificateRequestStatus:
      conditions: { type_name: CertificateRequestStatusCondition }
    Dns01:
      rfc2136: { type_name: RFC2136 }
    RFC2136:
      tsigSecretSecretRef: SecretRef
    Digitalocean:
      tokenSecretRef: SecretRef
    Cloudflare:
      apiKeySecretRef: SecretRef
      apiTokenSecretRef: SecretRef
    CloudDNS:
      serviceAccountSecretRef: SecretRef
    Keystore:
      pkcs12: { type_name: PKCS12 }
    PKCS12:
      passwordSecretRef: SecretRef
    JKS:
      passwordSecretRef: SecretRef
    AzureDNS:
      clientSecretSecretRef: SecretRef
    Auth:
      tokenSecretRef: SecretRef
    Akamai:
      accessTokenSecretRef: SecretRef
      clientSecretSecretRef: SecretRef
      clientTokenSecretRef: SecretRef
    AcmeDNS:
      accountSecretRef: SecretRef

  "operator.victoriametrics.com":
    BasicAuth:
      username: "io.k8s.api.core.v1.SecretKeySelector"

    "VMAlertmanagerSpec":
      imagePullSecrets: "io.k8s.api.core.v1.LocalObjectReference"
      volumes: "io.k8s.api.core.v1.Volume"
      volumeMounts: "io.k8s.api.core.v1.VolumeMount"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      affinity: "io.k8s.api.core.v1.Affinity"
      tolerations: "io.k8s.api.core.v1.Toleration"
      securityContext: "io.k8s.api.core.v1.PodSecurityContext"
      containers: "io.k8s.api.core.v1.Container"
      initContainers: "io.k8s.api.core.v1.Container"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
      storage:
        type_name: "StorageSpec"
      livenessProbe: "io.k8s.api.core.v1.Probe"
      readinessProbe: "io.k8s.api.core.v1.Probe"
      startupProbe: "io.k8s.api.core.v1.Probe"

    "ServiceSpec":
      spec: "io.k8s.api.core.v1.ServiceSpec"

    "StorageSpec":
      emptyDir: "io.k8s.api.core.v1.EmptyDirVolumeSource"
      volumeClaimTemplate:
        type_name: EmbeddedPersistentVolumeClaim

    "EmbeddedPersistentVolumeClaim":
      spec: "io.k8s.api.core.v1.PersistentVolumeClaimSpec"
      status:

    "VMAgentSpec":
      aPIServerConfig:
        snake_name: api_server_config
      imagePullSecrets: "io.k8s.api.core.v1.LocalObjectReference"
      volumes: "io.k8s.api.core.v1.Volume"
      volumeMounts: "io.k8s.api.core.v1.VolumeMount"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      affinity: "io.k8s.api.core.v1.Affinity"
      tolerations: "io.k8s.api.core.v1.Toleration"
      securityContext: "io.k8s.api.core.v1.PodSecurityContext"
      hostAliases: "io.k8s.api.core.v1.HostAlias"
      containers: "io.k8s.api.core.v1.Container"
      initContainers: "io.k8s.api.core.v1.Container"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
      additionalScrapeConfigs: "io.k8s.api.core.v1.SecretKeySelector"
      extraEnvs: "io.k8s.api.core.v1.EnvVar"
      rollingUpdate: "io.k8s.api.apps.v1.RollingUpdateDeployment"
      livenessProbe: "io.k8s.api.core.v1.Probe"
      readinessProbe: "io.k8s.api.core.v1.Probe"
      startupProbe: "io.k8s.api.core.v1.Probe"
      inlineRelabelConfig: "RelabelConfig"

    "VMAgentSpecRemoteWrite":
      inlineUrlRelabelConfig: "RelabelConfig"

    "VMAlertSpec":
      imagePullSecrets: "io.k8s.api.core.v1.LocalObjectReference"
      volumes: "io.k8s.api.core.v1.Volume"
      volumeMounts: "io.k8s.api.core.v1.VolumeMount"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      affinity: "io.k8s.api.core.v1.Affinity"
      tolerations: "io.k8s.api.core.v1.Toleration"
      securityContext: "io.k8s.api.core.v1.PodSecurityContext"
      containers: "io.k8s.api.core.v1.Container"
      initContainers: "io.k8s.api.core.v1.Container"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
      extraEnvs: "io.k8s.api.core.v1.EnvVar"
      livenessProbe: "io.k8s.api.core.v1.Probe"
      readinessProbe: "io.k8s.api.core.v1.Probe"
      startupProbe: "io.k8s.api.core.v1.Probe"

    "VMSingleSpec":
      imagePullSecrets: "io.k8s.api.core.v1.LocalObjectReference"
      storage: "io.k8s.api.core.v1.PersistentVolumeClaimSpec"
      volumes: "io.k8s.api.core.v1.Volume"
      volumeMounts: "io.k8s.api.core.v1.VolumeMount"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      affinity: "io.k8s.api.core.v1.Affinity"
      tolerations: "io.k8s.api.core.v1.Toleration"
      securityContext: "io.k8s.api.core.v1.PodSecurityContext"
      hostAliases: "io.k8s.api.core.v1.HostAlias"
      containers: "io.k8s.api.core.v1.Container"
      initContainers: "io.k8s.api.core.v1.Container"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
      extraEnvs: "io.k8s.api.core.v1.EnvVar"
      livenessProbe: "io.k8s.api.core.v1.Probe"
      readinessProbe: "io.k8s.api.core.v1.Probe"
      startupProbe: "io.k8s.api.core.v1.Probe"

    "VMClusterSpec":
      imagePullSecrets: "io.k8s.api.core.v1.LocalObjectReference"
      vminsert: { type_name: VMInsert }
      vmselect: { type_name: VMSelect }
      vmstorage: { type_name: VMStorage }

    "VMInsert":
      volumes: "io.k8s.api.core.v1.Volume"
      volumeMounts: "io.k8s.api.core.v1.VolumeMount"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      affinity: "io.k8s.api.core.v1.Affinity"
      tolerations: "io.k8s.api.core.v1.Toleration"
      securityContext: "io.k8s.api.core.v1.PodSecurityContext"
      containers: "io.k8s.api.core.v1.Container"
      initContainers: "io.k8s.api.core.v1.Container"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
      extraEnvs: "io.k8s.api.core.v1.EnvVar"
      livenessProbe: "io.k8s.api.core.v1.Probe"
      readinessProbe: "io.k8s.api.core.v1.Probe"
      startupProbe: "io.k8s.api.core.v1.Probe"

    "VMSelect":
      volumes: "io.k8s.api.core.v1.Volume"
      volumeMounts: "io.k8s.api.core.v1.VolumeMount"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      affinity: "io.k8s.api.core.v1.Affinity"
      tolerations: "io.k8s.api.core.v1.Toleration"
      securityContext: "io.k8s.api.core.v1.PodSecurityContext"
      containers: "io.k8s.api.core.v1.Container"
      initContainers: "io.k8s.api.core.v1.Container"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
      persistentVolume: "StorageSpec"
      storage: "StorageSpec"
      extraEnvs: "io.k8s.api.core.v1.EnvVar"
      livenessProbe: "io.k8s.api.core.v1.Probe"
      readinessProbe: "io.k8s.api.core.v1.Probe"
      startupProbe: "io.k8s.api.core.v1.Probe"

    "VMStorage":
      volumes: "io.k8s.api.core.v1.Volume"
      volumeMounts: "io.k8s.api.core.v1.VolumeMount"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      affinity: "io.k8s.api.core.v1.Affinity"
      tolerations: "io.k8s.api.core.v1.Toleration"
      securityContext: "io.k8s.api.core.v1.PodSecurityContext"
      containers: "io.k8s.api.core.v1.Container"
      initContainers: "io.k8s.api.core.v1.Container"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
      storage: "StorageSpec"
      extraEnvs: "io.k8s.api.core.v1.EnvVar"
      livenessProbe: "io.k8s.api.core.v1.Probe"
      readinessProbe: "io.k8s.api.core.v1.Probe"
      startupProbe: "io.k8s.api.core.v1.Probe"

    "RelabelConfig":
      source_labels:
      target_label:

    "VMNodeScrapeSpec":
      metricRelabelConfigs: RelabelConfig
      # relabelConfigs:
    "VMPodScrapeSpec":
      podMetricsEndpoints: Endpoint

    "Endpoint":
      metricRelabelConfigs: RelabelConfig
      # relabel_configs: List[EndpointRelabelConfig]
    "TargetEndpoint":
      metricRelabelConfigs: RelabelConfig
    "Ingress":
      relabelingConfigs: RelabelConfig
    "StaticConfig":
      relabelingConfigs: RelabelConfig

  "monitoring.coreos.com":
    AlertmanagerSpec:
      affinity: "io.k8s.api.core.v1.Affinity"
      containers: "io.k8s.api.core.v1.Container"
      imagePullSecrets: "io.k8s.api.core.v1.LocalObjectReference"
      initContainers: "io.k8s.api.core.v1.Container"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      securityContext: "io.k8s.api.core.v1.PodSecurityContext"
      tolerations: "io.k8s.api.core.v1.Toleration"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
      volumeMounts: "io.k8s.api.core.v1.VolumeMount"
      volumes: "io.k8s.api.core.v1.Volume"

    PrometheusSpec:
      affinity: "io.k8s.api.core.v1.Affinity"
      containers: "io.k8s.api.core.v1.Container"
      imagePullSecrets: "io.k8s.api.core.v1.LocalObjectReference"
      initContainers: "io.k8s.api.core.v1.Container"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      securityContext: "io.k8s.api.core.v1.PodSecurityContext"
      tolerations: "io.k8s.api.core.v1.Toleration"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
      volumes: "io.k8s.api.core.v1.Volume"
      volumeMounts: "io.k8s.api.core.v1.VolumeMount"

    Storage:
      emptyDir: "io.k8s.api.core.v1.EmptyDirVolumeSource"
      volumeClaimTemplate: "io.k8s.api.core.v1.PersistentVolumeClaim"

    Thano:
      resources: "io.k8s.api.core.v1.ResourceRequirements"

    ThanosRulerSpec:
      affinity: "io.k8s.api.core.v1.Affinity"
      containers: "io.k8s.api.core.v1.Container"
      imagePullSecrets: "io.k8s.api.core.v1.LocalObjectReference"
      initContainers: "io.k8s.api.core.v1.Container"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      securityContext: "io.k8s.api.core.v1.PodSecurityContext"
      tolerations: "io.k8s.api.core.v1.Toleration"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
      volumes: "io.k8s.api.core.v1.Volume"

  "rook.io":
    StretchClusterZone:
      volumeClaimTemplate: "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
    CephClusterSpec:
      resources: { type: object, additionalProperties: { $ref: "io.k8s.api.core.v1.ResourceRequirements" } }
    CephClusterSpecMON:
      volumeClaimTemplate: "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
    CephClusterSpecHealthCheck:
      livenessProbe: { type: object, additionalProperties: { $ref: "io.k8s.api.core.v1.Probe" } }
    CephObjectStoreSpecHealthCheck:
      livenessProbe: "io.k8s.api.core.v1.Probe"
    CephFilesystemMirrorSpec:
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    CephFilesystemSpec:
      dataPools: CephBlockPoolSpec
      metadataPool: CephBlockPoolSpec
    CephObjectStoreSpec:
      dataPool: CephBlockPoolSpec
      metadataPool: CephBlockPoolSpec
    CephObjectZoneSpec:
      dataPool: CephBlockPoolSpec
      metadataPool: CephBlockPoolSpec
    CephRBDMirrorSpec:
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    Gateway:
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    MetadataServer:
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    Node:
      volumeClaimTemplates: "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    Placement:
      tolerations: "io.k8s.api.core.v1.Toleration"
    Server:
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    StorageClassDeviceSet:
      volumeClaimTemplates: "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      preparePlacement: "Placement"
    Storage:
      volumeClaimTemplates: "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"

  "postgres-operator.crunchydata.com":
    Config:
      files: "io.k8s.api.core.v1.VolumeProjection"
    RepoHost:
      affinity: "io.k8s.api.core.v1.Affinity"
      sshSecret: "io.k8s.api.core.v1.SecretProjection"
      sshConfigMap: "io.k8s.api.core.v1.SecretProjection"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      tolerations: "io.k8s.api.core.v1.Toleration"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
    RepoVolume:
      volumeClaimSpec: "io.k8s.api.core.v1.PersistentVolumeClaimSpec"
    Restore:
      affinity: "io.k8s.api.core.v1.Affinity"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      tolerations: "io.k8s.api.core.v1.Toleration"
    Dedicated:
      affinity: "io.k8s.api.core.v1.Affinity"
    DataSourcePostgresCluster:
      affinity: "io.k8s.api.core.v1.Affinity"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      tolerations: "io.k8s.api.core.v1.Toleration"
    Instance:
      affinity: "io.k8s.api.core.v1.Affinity"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      dataVolumeClaimSpec: "io.k8s.api.core.v1.PersistentVolumeClaimSpec"
      walVolumeClaimSpec: "io.k8s.api.core.v1.PersistentVolumeClaimSpec"
      tolerations: "io.k8s.api.core.v1.Toleration"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
    PgBouncer:
      affinity: "io.k8s.api.core.v1.Affinity"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
      customTLSSecret: "io.k8s.api.core.v1.SecretProjection"
      tolerations: "io.k8s.api.core.v1.Toleration"
      topologySpreadConstraints: "io.k8s.api.core.v1.TopologySpreadConstraint"
    PgbouncerConfig:
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    SidecarPgbackrest:
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    BackupPgbackrest:
      configuration: "io.k8s.api.core.v1.VolumeProjection"
    Exporter:
      configuration: "io.k8s.api.core.v1.VolumeProjection"
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    ReplicaCertCopy:
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    JOB:
      resources: "io.k8s.api.core.v1.ResourceRequirements"
    PostgresClusterSpec:
      customReplicationTLSSecret: "io.k8s.api.core.v1.SecretProjection"
      customTLSSecret: "io.k8s.api.core.v1.SecretProjection"
      imagePullSecrets: "io.k8s.api.core.v1.LocalObjectReference"